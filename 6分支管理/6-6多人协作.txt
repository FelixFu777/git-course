1.要查看远程库的信息，或者详细信息
  git remote
  git remote -v
2.推送分支
  git push origin master
3.抓取分支
  git clone git@github.com:michaelliao/learngit.git
4.你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地
  git checkout -b dev origin/dev
5.提交代码
  git add env.txt
  git commit -m "add env"
6.指定本地dev分支与远程origin/dev分支的链接
  git branch --set-upstream-to=origin/dev dev
7.拉去远端代码
  git pull
8.解决冲突后
  git add env.txt
  git commit -m "add env"
  git push
9.查看本地和远端所有分支
  git branch -a
10.查看远端分支
  git branch -r
总结：
  因此，多人协作的工作模式通常是这样：

  首先，可以试图用git push origin <branch-name>推送自己的修改；

  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

  如果合并有冲突，则解决冲突，并在本地提交；

  没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

  如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

  这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结：
  查看远程库信息，使用git remote -v；

  本地新建的分支如果不推送到远程，对其他人就是不可见的；

  从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

  在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

  建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

  从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。